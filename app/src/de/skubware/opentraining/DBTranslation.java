package de.skubware.opentraining;

import de.skubware.opentraining.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBTRANSLATION.
 */
public class DBTranslation {

    private String locale;
    private String translated_name;
    private String primary_name;


    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBTranslationDao myDao;

    private DBMuscle dBMuscle;
    private String dBMuscle__resolvedKey;


    public DBTranslation() {
    }

    public DBTranslation(String locale, String translated_name) {
        this.locale = locale;
        this.translated_name = translated_name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBTranslationDao() : null;
    }

    public String getLocale() {
        return locale;
    }

    public void setLocale(String locale) {
        this.locale = locale;
    }

    public String getTranslated_name() {
        return translated_name;
    }

    public void setTranslated_name(String translated_name) {
        this.translated_name = translated_name;
    }

    /** To-one relationship, resolved on first access. */
    public DBMuscle getDBMuscle() {
        String __key = this.primary_name;
        if (dBMuscle__resolvedKey == null || dBMuscle__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBMuscleDao targetDao = daoSession.getDBMuscleDao();
            DBMuscle dBMuscleNew = targetDao.load(__key);
            synchronized (this) {
                dBMuscle = dBMuscleNew;
            	dBMuscle__resolvedKey = __key;
            }
        }
        return dBMuscle;
    }

    public void setDBMuscle(DBMuscle dBMuscle) {
        synchronized (this) {
            this.dBMuscle = dBMuscle;
            primary_name = dBMuscle == null ? null : dBMuscle.getPrimary_name();
            dBMuscle__resolvedKey = primary_name;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
