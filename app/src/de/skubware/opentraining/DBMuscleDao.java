package de.skubware.opentraining;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.skubware.opentraining.DBMuscle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBMUSCLE.
*/
public class DBMuscleDao extends AbstractDao<DBMuscle, String> {

    public static final String TABLENAME = "DBMUSCLE";

    /**
     * Properties of entity DBMuscle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Primary_name = new Property(0, String.class, "primary_name", true, "PRIMARY_NAME");
    };

    private DaoSession daoSession;


    public DBMuscleDao(DaoConfig config) {
        super(config);
    }
    
    public DBMuscleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBMUSCLE' (" + //
                "'PRIMARY_NAME' TEXT PRIMARY KEY NOT NULL );"); // 0: primary_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBMUSCLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBMuscle entity) {
        stmt.clearBindings();
 
        String primary_name = entity.getPrimary_name();
        if (primary_name != null) {
            stmt.bindString(1, primary_name);
        }
    }

    @Override
    protected void attachEntity(DBMuscle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBMuscle readEntity(Cursor cursor, int offset) {
        DBMuscle entity = new DBMuscle( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // primary_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBMuscle entity, int offset) {
        entity.setPrimary_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DBMuscle entity, long rowId) {
        return entity.getPrimary_name();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DBMuscle entity) {
        if(entity != null) {
            return entity.getPrimary_name();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
